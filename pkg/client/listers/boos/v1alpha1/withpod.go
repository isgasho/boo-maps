/*
Copyright 2019 Matt Moore

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mattmoor/boo-maps/pkg/apis/boos/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WithPodLister helps list WithPods.
type WithPodLister interface {
	// List lists all WithPods in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WithPod, err error)
	// WithPods returns an object that can list and get WithPods.
	WithPods(namespace string) WithPodNamespaceLister
	WithPodListerExpansion
}

// withPodLister implements the WithPodLister interface.
type withPodLister struct {
	indexer cache.Indexer
}

// NewWithPodLister returns a new WithPodLister.
func NewWithPodLister(indexer cache.Indexer) WithPodLister {
	return &withPodLister{indexer: indexer}
}

// List lists all WithPods in the indexer.
func (s *withPodLister) List(selector labels.Selector) (ret []*v1alpha1.WithPod, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WithPod))
	})
	return ret, err
}

// WithPods returns an object that can list and get WithPods.
func (s *withPodLister) WithPods(namespace string) WithPodNamespaceLister {
	return withPodNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WithPodNamespaceLister helps list and get WithPods.
type WithPodNamespaceLister interface {
	// List lists all WithPods in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WithPod, err error)
	// Get retrieves the WithPod from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WithPod, error)
	WithPodNamespaceListerExpansion
}

// withPodNamespaceLister implements the WithPodNamespaceLister
// interface.
type withPodNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WithPods in the indexer for a given namespace.
func (s withPodNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WithPod, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WithPod))
	})
	return ret, err
}

// Get retrieves the WithPod from the indexer for a given namespace and name.
func (s withPodNamespaceLister) Get(name string) (*v1alpha1.WithPod, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("withpod"), name)
	}
	return obj.(*v1alpha1.WithPod), nil
}
